import logging
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import bot, dp, url
from db import check_user_registered, get_user_data,update_user_data, \
    register_user, check_city_in_db, delete_user_by_id
from parse_city import *


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–æ–≤ (DEBUG, INFO, WARNING, ERROR, CRITICAL)
logging.basicConfig(level=logging.INFO)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–æ–≤ –¥–ª—è FSM (Finite State Machine)
class RegistrationForm(StatesGroup):
    waiting_for_firstname = State()
    waiting_for_lastname = State()
    waiting_for_birthday = State()

#–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —á–µ—Ä–µ–∑ StatesGroup
class UpdateForm(StatesGroup):
    waiting_for_update_firstname=State()
    waiting_for_update_lastname=State()
    waiting_for_update_birthday=State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ñ–∞–º–∏–ª–∏–∏
@dp.message_handler(state=[UpdateForm.waiting_for_update_firstname, UpdateForm.waiting_for_update_firstname])
async def process_update_firstname(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await state.get_state() == UpdateForm.waiting_for_update_firstname.state:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(firstname=message.text)
        # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await UpdateForm.waiting_for_update_lastname.set()
        await message.reply("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:")
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(firstname=message.text)
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        lastname = data.get('lastname')
        birthday = data.get('birthday')

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_user_data(message.from_user.id, firstname=message.text, lastname=lastname, birthday=birthday)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        await state.finish()
        await my_profile_info(types.CallbackQuery.from_user(callback_query=False, user_id=message.from_user.id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∏–º–µ–Ω–∏
@dp.message_handler(state=UpdateForm.waiting_for_update_lastname)
async def process_update_lastname(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(lastname=message.text)
    # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await UpdateForm.waiting_for_update_birthday.set()
    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message_handler(state=UpdateForm.waiting_for_update_birthday)
async def process_update_birthday(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(birthday=message.text)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    firstname = data.get('firstname')
    lastname = data.get('lastname')
    birthday = data.get('birthday')
    user_id=message.from_user.id
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    update_user_data(user_id, firstname, lastname, birthday)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await state.finish()

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    profile_button = InlineKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='my_profile_info')
    keyboard = InlineKeyboardMarkup().add(profile_button)

    await message.reply("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ!", reply_markup=keyboard)

@dp.callback_query_handler(text='update_data')
async def update(callback_query: types.CallbackQuery):
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await UpdateForm.waiting_for_update_firstname.set()
    await bot.send_message(callback_query.from_user.id, "–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if check_user_registered(message.from_user.id):
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
        profile_button = InlineKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='my_profile_info')
        keyboard = InlineKeyboardMarkup().add(profile_button)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –≤—ã–≤–æ–¥–∏–º –µ–º—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
        await message.reply(f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!
–ú—ã —Ä–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–π —Ç–∞–≤–µ—Ä–Ω–µ!

–ù–µ –∑–Ω–∞–µ—à—å —á–µ–º –∑–∞–Ω—è—Ç—å —Å–µ–±—è? 
–°—Ö–æ–¥–∏ –∫ –¥–æ—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –¢—ã –æ–±—è–∑–∞—Ç–µ–¥–±–Ω–æ –Ω–∞–π–¥–µ—à—å –¥–ª—è —Å–µ–±—è —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ!""", reply_markup=keyboard)
        #await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_keyboard())
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        # await RegistrationForm.waiting_for_firstname.set()
        # await message.reply("–ü—Ä–∏–≤–µ—Ç! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:")
        register_button = InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='register')
        keyboard = InlineKeyboardMarkup().add(register_button)
        await bot.send_message(message.from_user.id,
                               """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –æ—Ö–æ—Ç–Ω–∏–∫! 

–ß—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ø–æ–≥—Ä—É–∂–∞—Ç—å—Å—è –≤ –º–∏—Ä –∫—É–ª—å—Ç—É—Ä—ã, –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å, –∫—Ç–æ —Ç—ã, –∏–±–æ –º—ã –Ω–µ –¥–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω—ã—Ö –ø—Ä–∏—à–µ–ª—å—Ü–µ–≤ üõ∏. 

–¢–∞–∫ —á—Ç–æ, —Å–∫–∞–∂–∏ –Ω–∞–º, –∫—Ç–æ —Ç—ã, –∏ –º—ã –ø–æ–¥–∞—Ä–∏–º —Ç–µ–±–µ –º–∞—Å—Å—É –±–µ–∑—É–¥–µ—Ä–∂–Ω—ã—Ö —Ñ–∞–Ω—Ç–∞–∑–∏–π! 

–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∏ –ø—É—Å–∫–∞–π –≤–æ–ª–Ω–∞ –≤–µ–ª–∏–∫–æ–≥–æ –∑–∞—Ö–ª–µ—Å—Ç–Ω–µ—Ç —Ç–µ–±—è!""",
                               reply_markup=keyboard)

@dp.callback_query_handler(text='edit_profile')
async def edit_profile_info(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_data = get_user_data(callback_query.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –≤ —Å–ª–æ–≤–∞—Ä–µ user_data –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –∫–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if 'firstname' in user_data and 'lastname' in user_data and 'birthday' in user_data:
        birthday=user_data['birthday']
        year, month, day= str(birthday).split('-')
        info_text = f"""–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ñ–∏–ª–µ:
–§–∞–º–∏–ª–∏—è: {user_data['firstname']}
–ò–º—è: {user_data['lastname']}
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {day}.{month}.{year}"""
    else:
        info_text = "–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ –∏ –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    await bot.send_message(callback_query.from_user.id, info_text,
                           reply_markup=InlineKeyboardMarkup().add(
                               InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data='edit_profile_confirm'),
                               InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel_delete')
                           ))
# –†–∞–±–æ—Ç–∞–µ—Ç!!!
@dp.callback_query_handler(text='edit_profile_confirm')
async def edit_profile_confirm(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ñ–∏–ª–µ. –í–≤–µ–¥–∏—Ç–µ –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await UpdateForm.waiting_for_update_firstname.set()

# @dp.callback_query_handler(text='cancel_edit_profile')
# async def cancel_edit_profile(callback_query: types.CallbackQuery):
#     await my_profile(callback_query)

@dp.callback_query_handler(text='delete_profile')
async def delete_profile(callback_query: types.CallbackQuery):
    if check_user_registered(callback_query.from_user.id):
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ" –∏ "–û—Ç–º–µ–Ω–∞"
        confirm_button = InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data='confirm_delete')
        cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel_delete')
        keyboard = InlineKeyboardMarkup().add(confirm_button, cancel_button)

        await bot.send_message(callback_query.from_user.id, "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å?", reply_markup=keyboard)
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        register_button = InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='register')
        keyboard = InlineKeyboardMarkup().add(register_button)

        await bot.send_message(callback_query.from_user.id,
                               "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ.",
                               reply_markup=keyboard)

@dp.callback_query_handler(text='confirm_delete')
async def confirm_delete(callback_query: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    delete_user_by_id(callback_query.from_user.id)

    await bot.send_message(callback_query.from_user.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")

@dp.callback_query_handler(text='cancel_delete')
async def cancel_delete(callback_query: types.CallbackQuery):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    await my_profile_info(callback_query)


@dp.callback_query_handler(text='cancel')
async def cancel(callback_query: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if check_user_registered(callback_query.from_user.id):
        await bot.send_message(callback_query.from_user.id, "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        register_button = InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='register')
        keyboard = InlineKeyboardMarkup().add(register_button)

        await bot.send_message(callback_query.from_user.id,
                               "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ.",
                               reply_markup=keyboard)

@dp.callback_query_handler(text='register')
async def register(callback_query: types.CallbackQuery):
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await RegistrationForm.waiting_for_firstname.set()
    await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:")


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(text='my_main_menu')
async def my_main_menu(callback_query: types.CallbackQuery):
    profile_button = InlineKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='my_profile_info')
    keyboard = InlineKeyboardMarkup().add(profile_button)

    # –í—ã–≤–æ–¥–∏–º –µ–º—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    await bot.send_message.reply(f"""–¢–∏—Ö–∏–π —à–µ–ª–µ—Å—Ç –ª–∏—Å—Ç—å–µ–≤. –≠—Ç–æ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ""", reply_markup=keyboard)

@dp.callback_query_handler(text='my_profile_info')
async def my_profile_info(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_data = get_user_data(callback_query.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –≤ —Å–ª–æ–≤–∞—Ä–µ user_data –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    # —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ —Ä–∞–≤–Ω—ã None
    if 'lastname' in user_data and user_data['lastname'] is not None:
        lastname = user_data['lastname']
    else:
        lastname = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    if 'firstname' in user_data and user_data['firstname'] is not None:
        firstname = user_data['firstname']
    else:
        firstname = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    if 'birthday' in user_data and user_data['birthday'] is not None:
        birthday = user_data['birthday']
    else:
        birthday = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    year, month, day = str(birthday).split('-')

    info_text = f"""–§–∞–º–∏–ª–∏—è: {firstname}
–ò–º—è: {lastname}
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {day}.{month}.{year}"""

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
    delete_button = InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data='delete_profile')
    edit_button = InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data='edit_profile')
    keyboard = InlineKeyboardMarkup().add(edit_button, delete_button)

    await bot.send_message(callback_query.from_user.id, text=info_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ñ–∞–º–∏–ª–∏–∏
@dp.message_handler(state=[RegistrationForm.waiting_for_firstname, RegistrationForm.waiting_for_firstname])
async def process_firstname(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await state.get_state() == RegistrationForm.waiting_for_firstname.state:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(firstname=message.text)
        # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await RegistrationForm.waiting_for_lastname.set()
        await message.reply("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:")
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(firstname=message.text)
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        lastname = data.get('lastname')
        birthday = data.get('birthday')

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_user_data(message.from_user.id, firstname=message.text, lastname=lastname, birthday=birthday)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        await state.finish()
        await my_profile_info(types.CallbackQuery.from_user(callback_query=False, user_id=message.from_user.id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∏–º–µ–Ω–∏
@dp.message_handler(state=RegistrationForm.waiting_for_lastname)
async def process_lastname(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(lastname=message.text)
    # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await RegistrationForm.waiting_for_birthday.set()
    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message_handler(state=RegistrationForm.waiting_for_birthday)
async def process_birthday(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(birthday=message.text)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    firstname = data.get('firstname')
    lastname = data.get('lastname')
    birthday = data.get('birthday')

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    register_user(message.from_user.id, firstname, lastname, birthday)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await state.finish()

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    profile_button = InlineKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='my_profile_info')
    keyboard = InlineKeyboardMarkup().add(profile_button)

    await message.reply("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=keyboard)

def check_city():
    p = ParseWebBro(url)
    page_code = p.open_page_today()
    p.del_connect()
    city_dict = AnalyzeCode(page_code).collect_event_today()
    check_city_in_db(city_dict)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)


